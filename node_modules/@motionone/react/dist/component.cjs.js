'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib = require('tslib');
var React = require('react');
var dom = require('@motionone/dom');
var context = require('./context.cjs.js');
var events = require('./utils/events.cjs.js');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

function createMotionComponent(Component) {
    function Motion(_a, externalRef) {
        var { initial, animate, press, hover, inView, inViewOptions, variants, style, transition, onMotionStart, onMotionComplete, onHoverStart, onHoverEnd, onPressStart, onPressEnd, onViewEnter, onViewLeave } = _a, props = tslib.__rest(_a, ["initial", "animate", "press", "hover", "inView", "inViewOptions", "variants", "style", "transition", "onMotionStart", "onMotionComplete", "onHoverStart", "onHoverEnd", "onPressStart", "onPressEnd", "onViewEnter", "onViewLeave"]);
        const options = {
            initial,
            animate,
            press,
            hover,
            inView,
            inViewOptions,
            variants,
            transition,
        };
        const state = dom.createMotionState(options, React.useContext(context.MotionContext));
        const initialStyle = React.useMemo(() => dom.createStyles(state.getTarget()), []);
        const ref = externalRef || React.useRef(null);
        React.useEffect(() => state.mount(ref.current), []);
        React.useEffect(() => state.update(options));
        events.useEvents(ref, {
            onMotionStart,
            onMotionComplete,
            onHoverStart,
            onHoverEnd,
            onPressStart,
            onPressEnd,
            onViewEnter,
            onViewLeave,
        });
        const element = React.createElement(Component, Object.assign(Object.assign({}, props), { ref, style: Object.assign(Object.assign({}, style), initialStyle) }));
        return (React__namespace.createElement(context.MotionContext.Provider, { value: state }, element));
    }
    return React.forwardRef(Motion);
}

exports.createMotionComponent = createMotionComponent;
